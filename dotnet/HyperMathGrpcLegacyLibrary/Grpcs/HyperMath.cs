// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/HyperMath.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HyperMath.Grpc {

  /// <summary>Holder for reflection information generated from Protos/HyperMath.proto</summary>
  public static partial class HyperMathReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/HyperMath.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static HyperMathReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZQcm90b3MvSHlwZXJNYXRoLnByb3RvIicKC01hdGhSZXF1ZXN0EgsKA29w",
            "MRgBIAEoARILCgNvcDIYAiABKAEiGQoJTWF0aFJlcGx5EgwKBHJlc3AYASAB",
            "KAEyXAoLTWF0aFNlcnZpY2USIQoDU3VtEgwuTWF0aFJlcXVlc3QaCi5NYXRo",
            "UmVwbHkiABIqCgpHZXRBbGxDYWxjEgwuTWF0aFJlcXVlc3QaCi5NYXRoUmVw",
            "bHkiADABQhGqAg5IeXBlck1hdGguR3JwY2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::HyperMath.Grpc.MathRequest), global::HyperMath.Grpc.MathRequest.Parser, new[]{ "Op1", "Op2" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HyperMath.Grpc.MathReply), global::HyperMath.Grpc.MathReply.Parser, new[]{ "Resp" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Definizione dei messaggi
  /// </summary>
  public sealed partial class MathRequest : pb::IMessage<MathRequest> {
    private static readonly pb::MessageParser<MathRequest> _parser = new pb::MessageParser<MathRequest>(() => new MathRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MathRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HyperMath.Grpc.HyperMathReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MathRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MathRequest(MathRequest other) : this() {
      op1_ = other.op1_;
      op2_ = other.op2_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MathRequest Clone() {
      return new MathRequest(this);
    }

    /// <summary>Field number for the "op1" field.</summary>
    public const int Op1FieldNumber = 1;
    private double op1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Op1 {
      get { return op1_; }
      set {
        op1_ = value;
      }
    }

    /// <summary>Field number for the "op2" field.</summary>
    public const int Op2FieldNumber = 2;
    private double op2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Op2 {
      get { return op2_; }
      set {
        op2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MathRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MathRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Op1, other.Op1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Op2, other.Op2)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Op1 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Op1);
      if (Op2 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Op2);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Op1 != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Op1);
      }
      if (Op2 != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Op2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Op1 != 0D) {
        size += 1 + 8;
      }
      if (Op2 != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MathRequest other) {
      if (other == null) {
        return;
      }
      if (other.Op1 != 0D) {
        Op1 = other.Op1;
      }
      if (other.Op2 != 0D) {
        Op2 = other.Op2;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Op1 = input.ReadDouble();
            break;
          }
          case 17: {
            Op2 = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MathReply : pb::IMessage<MathReply> {
    private static readonly pb::MessageParser<MathReply> _parser = new pb::MessageParser<MathReply>(() => new MathReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MathReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HyperMath.Grpc.HyperMathReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MathReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MathReply(MathReply other) : this() {
      resp_ = other.resp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MathReply Clone() {
      return new MathReply(this);
    }

    /// <summary>Field number for the "resp" field.</summary>
    public const int RespFieldNumber = 1;
    private double resp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Resp {
      get { return resp_; }
      set {
        resp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MathReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MathReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Resp, other.Resp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Resp != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Resp);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Resp != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Resp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Resp != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MathReply other) {
      if (other == null) {
        return;
      }
      if (other.Resp != 0D) {
        Resp = other.Resp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Resp = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
